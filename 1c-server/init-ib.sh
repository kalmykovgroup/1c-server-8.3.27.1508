#!/bin/bash
set -e

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
: "${NOTIFY_SH:?‚ùå NOTIFY_SH –Ω–µ –∑–∞–¥–∞–Ω!}" 
SCRIPT_NAME="init-ib.sh (1c-server)"
source ${NOTIFY_SH}
trap 'handle_exit' EXIT

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ psql
for i in {1..60}; do
    if command -v psql >/dev/null; then
        echo "‚úÖ psql –Ω–∞–π–¥–µ–Ω"
        break
    else
        echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è psql... –ø–æ–ø—ã—Ç–∫–∞ $i"
        sleep 1
    fi
done

if ! command -v psql >/dev/null; then 
    LAST_ERROR_MESSAGE="‚ùå psql –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è"
    echo "$LAST_ERROR_MESSAGE" >&2
    exit 1
fi

# üì¶ –ü—É—Ç–∏
: "${PATH_TO_1C:?‚ùå –ù–µ –∑–∞–¥–∞–Ω PATH_TO_1C}"
RAC_BIN="${PATH_TO_1C}/rac"

# üìã –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∏ ENV
IB_NAME="${1:-$POSTGRES_DB}"
DB_HOST="${POSTGRES_HOST}"

# üîê –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
: "${POSTGRES_USER:?‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Postgres}"
: "${POSTGRES_PASSWORD:?‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Postgres}"
: "${IB_NAME:?‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–∞–∑—ã}"
: "${DB_HOST:?‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ö–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö}" 

echo "‚ÑπÔ∏è –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:        $IB_NAME"
echo "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Postgres:  $POSTGRES_USER"
echo "‚ÑπÔ∏è –•–æ—Å—Ç PostgreSQL:        $DB_HOST"

# üïì –û–∂–∏–¥–∞–Ω–∏–µ RAS
RAC_HOST="127.0.0.1"
RAC_PORT="1545"
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ RAS –Ω–∞ $RAC_HOST:$RAC_PORT..."

CLUSTER_ID=""
for i in {1..60}; do
    if "$RAC_BIN" "$RAC_HOST" "$RAC_PORT" cluster list &>/dev/null; then
        CLUSTER_ID=$("$RAC_BIN" "$RAC_HOST" "$RAC_PORT" cluster list | awk '/cluster/{print $3}')
        [ -n "$CLUSTER_ID" ] && break
    fi
    echo "üîÑ –ü–æ–ø—ã—Ç–∫–∞ $i/60: –∫–ª–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ..."
    sleep 1
done

[ -z "$CLUSTER_ID" ] && {
      LAST_ERROR_MESSAGE="‚ùå –ö–ª–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
      echo "$LAST_ERROR_MESSAGE" >&2
      exit 1 
  }
echo "‚úÖ –ö–ª–∞—Å—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω: $CLUSTER_ID"
 
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ rac 
IB_EXIST=$(
  "$RAC_BIN" "$RAC_HOST" "$RAC_PORT" infobase summary list --cluster="$CLUSTER_ID" | \
  awk -v name="$IB_NAME" '
    $1 == "infobase" { uuid = $3 }
    $1 == "name" && $3 == name { found = 1 }
    found && $1 == "name" && $3 == name { print uuid; exit }
  '
)

if [ -n "$IB_EXIST" ]; then
    echo "‚ÑπÔ∏è –ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–ª—è '$IB_NAME' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ –¥–∞–Ω–Ω—ã–º RAS. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º."
    exit 0
fi


# üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ò–ë
echo "üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ò–ë '$IB_NAME'..."
timeout 180 "$RAC_BIN" "$RAC_HOST" "$RAC_PORT" infobase create \
  --cluster="$CLUSTER_ID" \
  --create-database \
  --name="$IB_NAME" \
  --dbms=PostgreSQL \
  --db-server="$DB_HOST" \
  --db-name="$IB_NAME" \
  --db-user="$POSTGRES_USER" \
  --db-pwd="$POSTGRES_PASSWORD" \
  --locale=ru

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
echo "‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –Ω–∞–ª–∏—á–∏–µ –ò–ë '$IB_NAME' –≤ PostgreSQL..."
if PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$DB_HOST" -U "$POSTGRES_USER" -d postgres -tAc \
  "SELECT 1 FROM pg_database WHERE datname = '$IB_NAME'" | grep -q 1; then
    echo "‚úÖ –§–∏–∑–∏—á–µ—Å–∫–∞—è –±–∞–∑–∞ '$IB_NAME' –Ω–∞–π–¥–µ–Ω–∞ –≤ PostgreSQL."
else 
    LAST_ERROR_MESSAGE="‚ùå –ë–∞–∑–∞ '$IB_NAME' –ù–ï –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ PostgreSQL!"
    echo "$LAST_ERROR_MESSAGE" >&2
    exit 1
fi

# üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ UUID
get_ib_uuid() {
    "$RAC_BIN" "$RAC_HOST" "$RAC_PORT" infobase summary list --cluster="$CLUSTER_ID" | \
    awk -v name="$IB_NAME" '$1=="infobase"{uuid=$3} $1=="name" && $3==name {print uuid; exit}'
}

IB_UUID=$(get_ib_uuid)
[ -z "$IB_UUID" ] && {  
  LAST_ERROR_MESSAGE="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å UUID –¥–ª—è '$IB_NAME'"
  echo "$LAST_ERROR_MESSAGE" >&2
  exit 1
}

# üì¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ò–ë
echo "üì¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ò–ë '$IB_NAME'..."
"$RAC_BIN" "$RAC_HOST" "$RAC_PORT" infobase update \
    --cluster="$CLUSTER_ID" \
    --infobase="$IB_UUID" \
    --descr="–ò–ë '$IB_NAME'" \
    --license-distribution=allow \
    --scheduled-jobs-deny=off \
    --sessions-deny=off
 

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
INFO_OUTPUT=$("$RAC_BIN" "$RAC_HOST" "$RAC_PORT" infobase info --cluster="$CLUSTER_ID" --infobase="$IB_UUID")
LICENSE_DIST=$(echo "$INFO_OUTPUT" | awk -F ':' '/license-distribution/{gsub(/^[ \t]+/, "", $2); print $2}')
SESSIONS_DENY=$(echo "$INFO_OUTPUT" | awk -F ':' '/sessions-deny/{gsub(/^[ \t]+/, "", $2); print $2}')
SCHED_JOBS=$(echo "$INFO_OUTPUT" | awk -F ':' '/scheduled-jobs-deny/{gsub(/^[ \t]+/, "", $2); print $2}')

if [[ "$LICENSE_DIST" == "allow" && "$SESSIONS_DENY" == "off" && "$SCHED_JOBS" == "off" ]]; then
    echo "‚úÖ –ë–∞–∑–∞ '$IB_NAME' –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."
else
    echo "‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö:"
    echo "license-distribution: $LICENSE_DIST"
    echo "sessions-deny:        $SESSIONS_DENY"
    echo "scheduled-jobs-deny:  $SCHED_JOBS"
fi

