#!/usr/bin/env bash
set -euo pipefail

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
: "${NOTIFY_SH:?‚ùå NOTIFY_SH –Ω–µ –∑–∞–¥–∞–Ω!}" 
SCRIPT_NAME="entrypoint.sh (1c-server)"
source ${NOTIFY_SH}
trap 'handle_exit' EXIT
 
: "${DOMAIN:?‚ùå DOMAIN –Ω–µ –∑–∞–¥–∞–Ω!}" 
: "${DOMAIN_VNC_SERVER:?‚ùå DOMAIN_VNC_SERVER –Ω–µ –∑–∞–¥–∞–Ω!}" 
: "${DOMAIN_VNC_HASPD:?‚ùå DOMAIN_VNC_HASPD –Ω–µ –∑–∞–¥–∞–Ω!}" 
: "${CERTBOT_EMAIL:?‚ùå CERTBOT_EMAIL –Ω–µ –∑–∞–¥–∞–Ω!}" 
: "${CLOUD_FLARE:?‚ùå CLOUD_FLARE –Ω–µ –∑–∞–¥–∞–Ω!}" 

echo "üåê Certbot entrypoint –∑–∞–ø—É—â–µ–Ω..." 
echo "üîπ EMAIL: ${CERTBOT_EMAIL}"
echo "üîπ DOMAIN: ${DOMAIN}"

RENEW_CRON="/etc/cron.d/certbot-renew"
 
issue_if_missing() {
  local cert_name="$1"
  local domains=("${@:2}")
  local cert_path="/etc/letsencrypt/live/${cert_name}/fullchain.pem"

  if [[ -f "$cert_path" ]]; then
    echo "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è ${cert_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
    return
  fi

  echo "üîê –í—ã–ø—É—Å–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è ${cert_name}:"
  for d in "${domains[@]}"; do echo "   - $d"; done

  set +e
  output=$(certbot certonly \
    --dns-cloudflare \
    --dns-cloudflare-credentials "$CLOUD_FLARE" \
    --dns-cloudflare-propagation-seconds 30 \
    --cert-name "$cert_name" \
    "${domains[@]/#/-d }" \
    --agree-tos \
    --email "$CERTBOT_EMAIL" \
    --non-interactive 2>&1)
  status=$?
  set -e

  if [[ $status -ne 0 ]]; then
    if echo "$output" | grep -q "too many certificates"; then 
      LAST_ERROR_MESSAGE="‚õî –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç Let's Encrypt –Ω–∞ –≤—ã–ø—É—Å–∫ –¥–ª—è ${cert_name} \n $output" | grep -oE "retry after .*"
      echo "$LAST_ERROR_MESSAGE" >&2
      exit 1
    else
      LAST_ERROR_MESSAGE="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø—É—Å–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è ${cert_name}: \n $output"
      echo "$LAST_ERROR_MESSAGE" >&2
      exit 1 
    fi
  else
    echo "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø—É—â–µ–Ω –¥–ª—è ${cert_name}"
  fi
}


# --- –í—ã–ø—É—Å–∫ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ --- 
issue_if_missing "${DOMAIN}" "${DOMAIN}"        # 1c.kalmykov.group
issue_if_missing "${DOMAIN_VNC_SERVER}" "${DOMAIN_VNC_SERVER}"        # 1c.kalmykov.group
issue_if_missing "${DOMAIN_VNC_HASPD}" "${DOMAIN_VNC_HASPD}"        # 1c.kalmykov.group

echo "üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ..." 
if ! certbot renew \
  --quiet \
  --dns-cloudflare \
  --dns-cloudflare-credentials "$CLOUD_FLARE" \
  --post-hook 'docker exec nginx nginx -s reload' \
  >> /var/log/certbot-renew.log 2>&1; then
  LAST_ERROR_MESSAGE="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ certbot"
  return 1
fi

# --- Cron –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è ---
cat <<EOF > "$RENEW_CRON"
0 3 * * * root bash -c '
  source /opt/scripts/utils.sh
  certbot renew \
    --quiet \
    --dns-cloudflare \
    --dns-cloudflare-credentials $CLOUD_FLARE \
    --post-hook "docker exec nginx nginx -s reload" \
    >> /var/log/certbot-renew.log 2>&1 || notify "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ certbot (cron)"
'
EOF

chmod 0644 "$RENEW_CRON"
echo "üóì  Cron‚Äë–∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: $RENEW_CRON"

echo "üöÄ –ó–∞–ø—É—Å–∫ cron (foreground)..."
cron -f

